#include "timebase.h"
#include "stm32f0xx.h"

#define CTRL_ENABLE		(1U<<0)
#define CTRL_TICKINT	(1U<<1)
#define CTRL_CLKSRC		(1U<<2)
#define CTRL_COUNTFLAG	(1U<<16)
#define MAX_DELAY 		0xFFFFFFFF
#define ONE_SEC_LOAD 	8000000
#define ONE_MSEC_LOAD 	8000
#define TICK_FREQ		1
volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
/*Delay in seconds*/

void delay(uint32_t delay)
{
	uint32_t tickstart=get_tick();
	uint32_t wait = delay;
	if(wait<MAX_DELAY){
		wait+=(uint32_t)TICK_FREQ;
	}
	while((get_tick()-tickstart)<wait){}
}
uint32_t get_tick(void)
{
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
	__enable_irq();

	return g_curr_tick_p;
}


static void tick_increment(void)
{
	g_curr_tick += TICK_FREQ;
}
void timebase_init(void)
{
	/*Disable global interrupts*/
	__disable_irq();
	/*Load the timer num of clock cycles per second*/
	SysTick->LOAD = ONE_MSEC_LOAD-1;//Total time=Number of ticksÃ—Time per tick = 7999999 x 125ns=1sec
	//if SysTick->LOAD is set to the same value as the system clock frequency i.e interrupt occurs every 1 sec
	/*Clear systick current val reg*/
	SysTick->VAL=0;
	/*Select internal clock source*/
	SysTick->CTRL=CTRL_CLKSRC;
	/*enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
	/*Enable systick*/
	SysTick->CTRL |= CTRL_ENABLE;
	/*Enable global interrupt*/
	NVIC_EnableIRQ(SysTick_IRQn);
	__enable_irq();
}

void SysTick_Handler(void){
	tick_increment();
}
